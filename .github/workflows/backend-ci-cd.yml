name: CI/CD Backend Staging - SVS Maritime

on:
  push:
    branches: [ develop ]
  pull_request:  # Ajout pour tester les PR
    branches: [ develop ]
  workflow_dispatch:  # Permet de d√©clencher manuellement le workflow

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  MAVEN_OPTS: '-Xmx1024m'
  ARTIFACT_NAME: 'svs-spring-app'
  DEPLOY_PATH: '/home/deployer'

jobs:
  # Job de validation des pr√©requis
  validate:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ github.ref == 'refs/heads/develop' && github.event_name != 'pull_request' }}
    steps:
      - name: Validation du contexte
        run: |
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Should deploy: ${{ github.ref == 'refs/heads/develop' && github.event_name != 'pull_request' }}"

  # Job de build avec tests et s√©curit√©
  build:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Pour SonarQube et analyse compl√®te

      - name: Setup Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven

      - name: Cache des d√©pendances Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: V√©rification de la configuration Maven
        run: |
          mvn --version
          mvn help:effective-settings
          mvn help:active-profiles

      - name: Ex√©cution des tests unitaires
        run: mvn -B test -Pstaging
        env:
          MAVEN_OPTS: ${{ env.MAVEN_OPTS }}

      - name: Build de l'application
        run: |
          mvn -B clean package -Pstaging \
            -DskipTests=false \
            -Dmaven.test.failure.ignore=false
        env:
          MAVEN_OPTS: ${{ env.MAVEN_OPTS }}

      - name: V√©rification de l'existence de l'artefact
        run: |
          if [ ! -f target/*.jar ]; then
            echo "‚ùå Aucun fichier JAR trouv√© dans target/"
            ls -la target/
            exit 1
          fi
          echo "‚úÖ Artefact JAR trouv√©:"
          ls -la target/*.jar

      - name: G√©n√©ration du rapport de build
        run: |
          echo "## üìä Rapport de Build" > build-report.md
          echo "- **Date**: $(date)" >> build-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> build-report.md
          echo "- **Commit**: ${{ github.sha }}" >> build-report.md
          echo "- **Java Version**: ${{ env.JAVA_VERSION }}" >> build-report.md
          echo "### Artefacts g√©n√©r√©s:" >> build-report.md
          ls -la target/*.jar >> build-report.md

      - name: Upload de l'artefact JAR principal
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: target/*.jar
          retention-days: 30
          compression-level: 6
          if-no-files-found: error

      - name: Upload des rapports de tests
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            target/surefire-reports/
            target/site/
          retention-days: 7
          if-no-files-found: warn

      - name: Upload du rapport de build
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md
          retention-days: 7

  # Job de d√©ploiement conditionnel
  deploy:
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.should-deploy == 'true'
    environment:
      name: staging
      url: https://your-staging-url.com  # Remplacez par votre URL de staging

    steps:
      - name: Download de l'artefact JAR
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./artifacts

      - name: Pr√©paration de l'artefact pour le d√©ploiement
        run: |
          ls -la ./artifacts/
          # Renomme le JAR avec un nom standardis√©
          cd ./artifacts
          JAR_FILE=$(ls *.jar | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "‚ùå Aucun fichier JAR trouv√©"
            exit 1
          fi
          
          mv "$JAR_FILE" "${{ env.ARTIFACT_NAME }}.jar"
          echo "‚úÖ Artefact pr√©par√©: ${{ env.ARTIFACT_NAME }}.jar"
          
          # V√©rification de l'int√©grit√©
          echo "üìä Taille de l'artefact: $(du -h ${{ env.ARTIFACT_NAME }}.jar)"
          
          # Cr√©ation d'un checksum pour v√©rification
          sha256sum "${{ env.ARTIFACT_NAME }}.jar" > "${{ env.ARTIFACT_NAME }}.jar.sha256"
          echo "üîê Checksum g√©n√©r√©"

      - name: Test de connectivit√© SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            echo "‚úÖ Connexion SSH √©tablie"
            echo "üìÇ Espace disque disponible:"
            df -h ${{ env.DEPLOY_PATH }}
            echo "üîß V√©rification des permissions:"
            ls -la ${{ env.DEPLOY_PATH }}/

      - name: Upload des artefacts sur le VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          source: "./artifacts/${{ env.ARTIFACT_NAME }}.jar,./artifacts/${{ env.ARTIFACT_NAME }}.jar.sha256"
          target: "${{ env.DEPLOY_PATH }}/new_artifact/"
          strip_components: 2  # Supprime "./artifacts/" du chemin
          overwrite: true

      - name: V√©rification de l'int√©grit√© sur le serveur
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}/new_artifact/
            echo "üîç V√©rification de l'int√©grit√© de l'artefact:"
            
            if [ ! -f "${{ env.ARTIFACT_NAME }}.jar" ]; then
              echo "‚ùå Artefact non trouv√©"
              exit 1
            fi
            
            if [ -f "${{ env.ARTIFACT_NAME }}.jar.sha256" ]; then
              if sha256sum -c "${{ env.ARTIFACT_NAME }}.jar.sha256"; then
                echo "‚úÖ Int√©grit√© de l'artefact v√©rifi√©e"
              else
                echo "‚ùå √âchec de la v√©rification d'int√©grit√©"
                exit 1
              fi
            fi
            
            echo "üìä Informations sur l'artefact:"
            ls -la "${{ env.ARTIFACT_NAME }}.jar"

      - name: Backup de l'ancienne version
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            # Cr√©er un backup de l'ancienne version si elle existe
            if [ -f "${{ env.DEPLOY_PATH }}/current/${{ env.ARTIFACT_NAME }}.jar" ]; then
              BACKUP_DIR="${{ env.DEPLOY_PATH }}/backups/$(date +%Y%m%d_%H%M%S)"
              mkdir -p "$BACKUP_DIR"
              cp "${{ env.DEPLOY_PATH }}/current/${{ env.ARTIFACT_NAME }}.jar" "$BACKUP_DIR/"
              echo "üíæ Backup cr√©√© dans: $BACKUP_DIR"
            
              # Nettoyer les anciens backups (garder seulement les 5 derniers)
              cd "${{ env.DEPLOY_PATH }}/backups"
              ls -t | tail -n +6 | xargs -r rm -rf
              echo "üßπ Anciens backups nettoy√©s"
            fi

      - name: Ex√©cution du script de d√©ploiement
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            # Export des variables d'environnement pour le script de d√©ploiement
            export ARTIFACT_NAME="${{ env.ARTIFACT_NAME }}"
            export DEPLOY_PATH="${{ env.DEPLOY_PATH }}"
            export BUILD_NUMBER="${{ github.run_number }}"
            export COMMIT_SHA="${{ github.sha }}"
            export BRANCH_NAME="${{ github.ref_name }}"
            
            # V√©rification de l'existence du script de d√©ploiement
            if [ ! -f "${{ env.DEPLOY_PATH }}/deploy_backend.sh" ]; then
              echo "‚ùå Script de d√©ploiement non trouv√©: ${{ env.DEPLOY_PATH }}/deploy_backend.sh"
              exit 1
            fi
            
            # Ex√©cution du script de d√©ploiement
            chmod +x "${{ env.DEPLOY_PATH }}/deploy_backend.sh"
            "${{ env.DEPLOY_PATH }}/deploy_backend.sh"

      - name: V√©rification post-d√©ploiement
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            # Attendre que l'application d√©marre
            echo "‚è≥ Attente du d√©marrage de l'application..."
            sleep 30
            
            # V√©rification simple du processus (adapter selon votre setup)
            if pgrep -f "${{ env.ARTIFACT_NAME }}.jar" > /dev/null; then
              echo "‚úÖ Application en cours d'ex√©cution"
            else
              echo "‚ö†Ô∏è  Processus de l'application non d√©tect√© (v√©rification manuelle recommand√©e)"
            fi
            
            # Affichage des logs r√©cents (si disponibles)
            LOG_FILE="${{ env.DEPLOY_PATH }}/logs/application.log"
            if [ -f "$LOG_FILE" ]; then
              echo "üìã Derni√®res lignes des logs:"
              tail -10 "$LOG_FILE"
            fi

  # Job de notification (optionnel)
  notify:
    runs-on: ubuntu-latest
    needs: [validate, build, deploy]
    if: always()
    steps:
      - name: Notification de fin de d√©ploiement
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ D√©ploiement r√©ussi de SVS Maritime sur staging"
            echo "üìä Build #${{ github.run_number }}"
            echo "üîó Commit: ${{ github.sha }}"
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "‚ùå √âchec du d√©ploiement"
          elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è D√©ploiement ignor√© (branch ou condition non remplie)"
          fi