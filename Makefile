# Makefile pour le projet SVS Backend - Dakar
# üö¢ API Backend pour la gestion des factures et d√©penses maritimes

# Variables
APP_NAME = svs-backend
VERSION = 1.0.0
JAVA_VERSION = 17
MAVEN_OPTS = -Dmaven.test.skip=false
DOCKER_COMPOSE_FILE = docker-compose.yml
DB_CONTAINER = svs-postgres
PGADMIN_CONTAINER = svs-pgadmin

# Couleurs pour les messages
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color
BLUE = \033[0;34m

.PHONY: help install clean build test run run-dev run-prod stop logs docker-up docker-down docker-restart db-init db-reset lint format check-deps swagger health status

# Commande par d√©faut
help: ## üìã Afficher l'aide
	@echo "$(BLUE)üö¢ Makefile pour SVS Backend - Dakar$(NC)"
	@echo ""
	@echo "$(GREEN)Commandes disponibles :$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""

# =============================================================================
# GESTION DES D√âPENDANCES
# =============================================================================

install: ## üì¶ Installer les d√©pendances Maven
	@echo "$(GREEN)üì¶ Installation des d√©pendances...$(NC)"
	mvn clean install -DskipTests
	@echo "$(GREEN)‚úÖ D√©pendances install√©es avec succ√®s$(NC)"

check-deps: ## üîç V√©rifier les d√©pendances Maven
	@echo "$(GREEN)üîç V√©rification des d√©pendances...$(NC)"
	mvn dependency:analyze
	mvn versions:display-dependency-updates

# =============================================================================
# COMPILATION ET BUILD
# =============================================================================

clean: ## üßπ Nettoyer le projet
	@echo "$(GREEN)üßπ Nettoyage du projet...$(NC)"
	mvn clean
	@echo "$(GREEN)‚úÖ Projet nettoy√©$(NC)"

compile: ## ‚öôÔ∏è Compiler le projet
	@echo "$(GREEN)‚öôÔ∏è Compilation...$(NC)"
	mvn compile
	@echo "$(GREEN)‚úÖ Compilation termin√©e$(NC)"

build: ## üî® Construire le projet (compile + package)
	@echo "$(GREEN)üî® Construction du projet...$(NC)"
	mvn clean package -DskipTests
	@echo "$(GREEN)‚úÖ Projet construit : target/$(APP_NAME)-$(VERSION).jar$(NC)"

build-full: ## üî® Construire le projet avec tests
	@echo "$(GREEN)üî® Construction compl√®te avec tests...$(NC)"
	mvn clean package
	@echo "$(GREEN)‚úÖ Construction compl√®te termin√©e$(NC)"

# =============================================================================
# TESTS
# =============================================================================

test: ## üß™ Lancer tous les tests
	@echo "$(GREEN)üß™ Ex√©cution des tests...$(NC)"
	mvn test

test-unit: ## üß™ Tests unitaires uniquement
	@echo "$(GREEN)üß™ Tests unitaires...$(NC)"
	mvn test -Dtest="**/*Test"

test-integration: ## üß™ Tests d'int√©gration uniquement
	@echo "$(GREEN)üß™ Tests d'int√©gration...$(NC)"
	mvn test -Dtest="**/*IT"

test-coverage: ## üìä Tests avec couverture de code
	@echo "$(GREEN)üìä Tests avec couverture...$(NC)"
	mvn clean jacoco:prepare-agent test jacoco:report
	@echo "$(GREEN)‚úÖ Rapport de couverture : target/site/jacoco/index.html$(NC)"

# =============================================================================
# LANCEMENT DE L'APPLICATION
# =============================================================================

run: ## üöÄ D√©marrer l'application (profil dev)
	@echo "$(GREEN)üöÄ D√©marrage de l'application SVS Backend...$(NC)"
	@echo "$(BLUE)üìç URL: http://localhost:8080/api$(NC)"
	@echo "$(BLUE)üìö Swagger: http://localhost:8080/api/swagger-ui.html$(NC)"
	@echo "$(BLUE)üè¢ Companies API: http://localhost:8080/api/companies$(NC)"
	mvn spring-boot:run -Dspring-boot.run.profiles=dev

run-dev: ## üöÄ D√©marrer en mode d√©veloppement
	@echo "$(GREEN)üöÄ Mode d√©veloppement avec hot-reload...$(NC)"
	mvn spring-boot:run -Dspring-boot.run.profiles=dev -Dspring-boot.run.jvmArguments="-Dspring.devtools.restart.enabled=true"

run-prod: ## üöÄ D√©marrer en mode production
	@echo "$(GREEN)üöÄ Mode production...$(NC)"
	java -jar -Dspring.profiles.active=prod target/$(APP_NAME)-$(VERSION).jar

run-background: ## üöÄ D√©marrer en arri√®re-plan
	@echo "$(GREEN)üöÄ D√©marrage en arri√®re-plan...$(NC)"
	nohup mvn spring-boot:run -Dspring-boot.run.profiles=dev > logs/app.log 2>&1 &
	@echo "$(GREEN)‚úÖ Application d√©marr√©e en arri√®re-plan$(NC)"

stop: ## ‚èπÔ∏è Arr√™ter l'application
	@echo "$(YELLOW)‚èπÔ∏è Arr√™t de l'application...$(NC)"
	pkill -f "svs-backend" || true
	@echo "$(GREEN)‚úÖ Application arr√™t√©e$(NC)"

# =============================================================================
# DOCKER ET BASE DE DONN√âES
# =============================================================================

docker-up: ## üê≥ D√©marrer tous les conteneurs Docker
	@echo "$(GREEN)üê≥ D√©marrage des conteneurs Docker...$(NC)"
	docker-compose -f $(DOCKER_COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Conteneurs d√©marr√©s$(NC)"
	@echo "$(BLUE)üìä PgAdmin: http://localhost:5050$(NC)"

docker-down: ## üê≥ Arr√™ter tous les conteneurs Docker
	@echo "$(YELLOW)üê≥ Arr√™t des conteneurs Docker...$(NC)"
	docker-compose -f $(DOCKER_COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ Conteneurs arr√™t√©s$(NC)"

docker-restart: ## üê≥ Red√©marrer les conteneurs Docker
	@echo "$(YELLOW)üê≥ Red√©marrage des conteneurs...$(NC)"
	$(MAKE) docker-down
	$(MAKE) docker-up

docker-logs: ## üìã Voir les logs des conteneurs
	@echo "$(GREEN)üìã Logs des conteneurs Docker...$(NC)"
	docker-compose -f $(DOCKER_COMPOSE_FILE) logs -f

docker-clean: ## üßπ Nettoyer Docker (volumes, images, etc.)
	@echo "$(YELLOW)üßπ Nettoyage Docker...$(NC)"
	docker-compose -f $(DOCKER_COMPOSE_FILE) down -v
	docker system prune -f
	@echo "$(GREEN)‚úÖ Docker nettoy√©$(NC)"

# =============================================================================
# GESTION BASE DE DONN√âES
# =============================================================================

db-start: ## üóÑÔ∏è D√©marrer uniquement PostgreSQL
	@echo "$(GREEN)üóÑÔ∏è D√©marrage de PostgreSQL...$(NC)"
	docker-compose -f $(DOCKER_COMPOSE_FILE) up -d postgresql
	@echo "$(GREEN)‚úÖ PostgreSQL d√©marr√©$(NC)"

db-stop: ## üóÑÔ∏è Arr√™ter PostgreSQL
	@echo "$(YELLOW)üóÑÔ∏è Arr√™t de PostgreSQL...$(NC)"
	docker-compose -f $(DOCKER_COMPOSE_FILE) stop postgresql
	@echo "$(GREEN)‚úÖ PostgreSQL arr√™t√©$(NC)"

db-connect: ## üóÑÔ∏è Se connecter √† PostgreSQL
	@echo "$(GREEN)üóÑÔ∏è Connexion √† PostgreSQL...$(NC)"
	docker exec -it $(DB_CONTAINER) psql -U postgres -d svs_db

db-reset: ## üóÑÔ∏è R√©initialiser la base de donn√©es
	@echo "$(YELLOW)üóÑÔ∏è R√©initialisation de la base...$(NC)"
	docker exec -it $(DB_CONTAINER) psql -U postgres -c "DROP DATABASE IF EXISTS svs_db;"
	docker exec -it $(DB_CONTAINER) psql -U postgres -c "CREATE DATABASE svs_db;"
	@echo "$(GREEN)‚úÖ Base de donn√©es r√©initialis√©e$(NC)"

db-backup: ## üíæ Sauvegarder la base de donn√©es
	@echo "$(GREEN)üíæ Sauvegarde de la base...$(NC)"
	docker exec -t $(DB_CONTAINER) pg_dump -U postgres svs_db > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e$(NC)"

# =============================================================================
# LIQUIBASE
# =============================================================================

liquibase-update: ## üîÑ Appliquer les migrations Liquibase
	@echo "$(GREEN)üîÑ Application des migrations...$(NC)"
	mvn liquibase:update

liquibase-status: ## üìä Statut des migrations Liquibase
	@echo "$(GREEN)üìä Statut des migrations...$(NC)"
	mvn liquibase:status

liquibase-rollback: ## ‚è™ Rollback Liquibase (1 changeset)
	@echo "$(YELLOW)‚è™ Rollback des migrations...$(NC)"
	mvn liquibase:rollback -Dliquibase.rollbackCount=1

# =============================================================================
# MONITORING ET LOGS
# =============================================================================

logs: ## üìã Voir les logs de l'application
	@echo "$(GREEN)üìã Logs de l'application...$(NC)"
	tail -f logs/svs-backend.log

health: ## üíö V√©rifier l'√©tat de l'application
	@echo "$(GREEN)üíö V√©rification de l'√©tat...$(NC)"
	@curl -s http://localhost:8080/api/management/health | jq '.' || echo "$(RED)‚ùå Application non accessible$(NC)"

swagger: ## üìö Ouvrir Swagger dans le navigateur
	@echo "$(GREEN)üìö Ouverture de Swagger...$(NC)"
	open http://localhost:8080/api/swagger-ui.html || xdg-open http://localhost:8080/api/swagger-ui.html

test-api: ## üß™ Tester l'API
	@echo "$(GREEN)üß™ Test de l'API...$(NC)"
	@curl -s http://localhost:8080/api/test/hello | jq '.' || echo "$(RED)‚ùå API non accessible$(NC)"

test-companies: ## üè¢ Tester l'API Companies
	@echo "$(GREEN)üè¢ Test de l'API Companies...$(NC)"
	@echo "$(BLUE)GET /api/companies$(NC)"
	@curl -s http://localhost:8080/api/companies | jq '.' || echo "$(RED)‚ùå API Companies non accessible$(NC)"
	@echo ""
	@echo "$(BLUE)GET /api/companies/active$(NC)"
	@curl -s http://localhost:8080/api/companies/active | jq '.' || echo "$(RED)‚ùå API Companies active non accessible$(NC)"

status: ## üìä Statut complet du projet
	@echo "$(BLUE)üìä Statut du projet SVS Backend$(NC)"
	@echo "$(GREEN)üîç V√©rification des composants...$(NC)"
	@echo ""
	@echo "üê≥ Docker:"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) ps
	@echo ""
	@echo "üóÑÔ∏è Base de donn√©es:"
	@docker exec $(DB_CONTAINER) pg_isready -U postgres || echo "$(RED)‚ùå PostgreSQL non accessible$(NC)"
	@echo ""
	@echo "üöÄ Application:"
	@curl -s http://localhost:8080/api/management/health > /dev/null && echo "$(GREEN)‚úÖ Application accessible$(NC)" || echo "$(RED)‚ùå Application non accessible$(NC)"
	@echo ""
	@echo "üè¢ API Companies:"
	@curl -s http://localhost:8080/api/companies > /dev/null && echo "$(GREEN)‚úÖ API Companies accessible$(NC)" || echo "$(RED)‚ùå API Companies non accessible$(NC)"

# =============================================================================
# QUALIT√â DE CODE
# =============================================================================

lint: ## üîç V√©rifier la qualit√© du code
	@echo "$(GREEN)üîç V√©rification de la qualit√©...$(NC)"
	mvn checkstyle:check

format: ## üé® Formater le code
	@echo "$(GREEN)üé® Formatage du code...$(NC)"
	mvn spotless:apply

# =============================================================================
# TESTS SP√âCIFIQUES COMPANIES
# =============================================================================

test-companies-crud: ## üß™ Tester CRUD Companies
	@echo "$(GREEN)üß™ Test CRUD Companies...$(NC)"
	@echo "$(BLUE)1. Cr√©ation d'une compagnie de test$(NC)"
	@curl -X POST http://localhost:8080/api/companies \
		-H "Content-Type: application/json" \
		-d '{"nom":"Test Company","raisonSociale":"Test SARL","adresse":"Dakar","ville":"Dakar","pays":"S√©n√©gal","telephone":"+221123456789","email":"test@company.sn"}' \
		| jq '.' || echo "$(RED)‚ùå Cr√©ation √©chou√©e$(NC)"
	@echo ""
	@echo "$(BLUE)2. Liste des compagnies$(NC)"
	@curl -s http://localhost:8080/api/companies | jq '.companies[] | {id, nom, email}' || echo "$(RED)‚ùå Liste √©chou√©e$(NC)"

# =============================================================================
# D√âPLOIEMENT
# =============================================================================

package: ## üì¶ Cr√©er le package de d√©ploiement
	@echo "$(GREEN)üì¶ Cr√©ation du package...$(NC)"
	mvn clean package -DskipTests
	@echo "$(GREEN)‚úÖ Package cr√©√© : target/$(APP_NAME)-$(VERSION).jar$(NC)"

# =============================================================================
# INSTALLATION COMPL√àTE
# =============================================================================

setup: ## ‚ö° Installation compl√®te du projet
	@echo "$(BLUE)‚ö° Installation compl√®te du projet SVS Backend$(NC)"
	$(MAKE) clean
	$(MAKE) install
	$(MAKE) docker-up
	@echo "$(YELLOW)‚è≥ Attente de 10 secondes pour PostgreSQL...$(NC)"
	@sleep 10
	$(MAKE) compile
	@echo "$(GREEN)‚úÖ Installation termin√©e !$(NC)"
	@echo "$(BLUE)üöÄ Vous pouvez maintenant lancer: make run$(NC)"

# =============================================================================
# WORKFLOW COMPLET
# =============================================================================

dev: ## üöÄ Workflow d√©veloppement complet
	@echo "$(BLUE)üöÄ D√©marrage du workflow d√©veloppement$(NC)"
	$(MAKE) docker-up
	@sleep 5
	$(MAKE) run-dev

ci: ## üîÑ Workflow CI (tests + build)
	@echo "$(BLUE)üîÑ Workflow CI$(NC)"
	$(MAKE) clean
	$(MAKE) compile
	$(MAKE) test
	$(MAKE) build

demo: ## üéØ D√©monstration compl√®te de l'API
	@echo "$(BLUE)üéØ D√©monstration de l'API SVS$(NC)"
	$(MAKE) test-api
	@echo ""
	$(MAKE) test-companies
	@echo ""
	@echo "$(GREEN)‚úÖ D√©monstration termin√©e$(NC)"
	@echo "$(BLUE)üìö Consultez Swagger: http://localhost:8080/api/swagger-ui.html$(NC)"

# =============================================================================
# AIDE D√âTAILL√âE
# =============================================================================

info: ## ‚ÑπÔ∏è Informations sur le projet
	@echo "$(BLUE)‚ÑπÔ∏è Informations du projet$(NC)"
	@echo "üìõ Nom: $(APP_NAME)"
	@echo "üè∑Ô∏è Version: $(VERSION)"
	@echo "‚òï Java: $(JAVA_VERSION)"
	@echo "üåç Environnement: D√©veloppement"
	@echo "üè¢ Entreprise: SVS - Dakar, S√©n√©gal"
	@echo ""
	@echo "üîó URLs importantes:"
	@echo "  ‚Ä¢ API: http://localhost:8080/api"
	@echo "  ‚Ä¢ Swagger: http://localhost:8080/api/swagger-ui.html"
	@echo "  ‚Ä¢ Health: http://localhost:8080/api/management/health"
	@echo "  ‚Ä¢ Companies: http://localhost:8080/api/companies"
	@echo "  ‚Ä¢ PgAdmin: http://localhost:5050"
	@echo ""
	@echo "üöÄ Endpoints Companies disponibles:"
	@echo "  ‚Ä¢ GET    /api/companies"
	@echo "  ‚Ä¢ POST   /api/companies"
	@echo "  ‚Ä¢ GET    /api/companies/{id}"
	@echo "  ‚Ä¢ PUT    /api/companies/{id}"
	@echo "  ‚Ä¢ DELETE /api/companies/{id}"
	@echo "  ‚Ä¢ GET    /api/companies/active"
	@echo "  ‚Ä¢ POST   /api/companies/search"